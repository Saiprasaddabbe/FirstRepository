Q1) What do you mean by Multithreading? Why is it important?
-->Multithreading is a programming concept in which the application can create a small unit of tasks to execute in
parallel. If you are working on a computer, it runs multiple applications and allocates processing power to them. A
simple program runs in sequence and the code statements execute one by one. This is a single-threaded application.
But, if the programming language supports creating multiple threads and passes them to the operating system to run
in parallel, it’s called multithreading.
Multithreading in Java is a process of executing multiple threads simultaneously.
A thread is a lightweight sub-process, the smallest unit of processing. Multiprocessing and multithreading, both are
used to achieve multitasking.
However, we use multithreading than multiprocessing because threads use a shared memory area. They don't
allocate separate memory areas so saves memory, and context-switching between the threads takes less time than
process.

**why it is important?
-->
Multithreading saves time as you can perform multiple operations together. 
The threads are independent, so it does not block the user to perform multiple
 operations at the same time and also, if an exception occurs in a single thread, 
 it does not affect other threads.
 
 Q2> What are the benefits of using Multithreading?
-->
1. It doesn't block the user because threads are independent and you can perform multiple operations at the
same time.
2. You can perform many operations together, so it saves time.
3. Threads are independent, so it doesn't affect other threads if an exception occurs in a single thread 
 
Q3) Differentiate between process and thread?
-->
Process:
A process is a program under execution i.e an active program.
Processes require more time for context switching as they are more heavy.
Processes are totally independent and don’t share memory.
Communication between processes requires more time than between threads.
If a process gets blocked, remaining processes can continue execution. 
Processes require more resources than threads.
Individual processes are independent of each other.
Processes have independent data and code segments.
All the different processes are treated separately by the operating system.
Processes require more time for creation.
Processes require more time for termination.

Threads:
A thread is a lightweight process that can be managed independently by a scheduler.
Threads require less time for context switching as they are lighter than processes.
A thread may share some memory with its peer threads.
Communication between threads requires less time than between processes .
If a user level thread gets blocked, all of its peer threads also get blocked.
Threads generally need less resources than processes.
Threads are parts of a process and so are dependent.
A thread shares the data segment, code segment, files etc. with its peer threads.
All user level peer threads are treated as a single task by the operating system.
Threads require less time for creation.
Threads require less time for termination.

Q4) What are the different states of a thread, or what is thread lifecycle?
-->
1. New state:-
When new thread is created using new keyword like object creation.
2. Runnable state:-
when start() method gets called it goes in runnable state.
3. Running state:-
when a perticular thread is called by thread schedular it goes in runnng state.
4. Blocked state:-
when sleep(),wait(),join() methods gets called is goes in blocked state.
5. Dead state:-
when run() method executes its last line it goes to dead state.

Q5) Differentiate between the Thread class and Runnable interface for creating a
-->
Thread:
It is a class.
It can be used to create a thread.
It has multiple methods such as ‘start’ and ‘run’.
It requires more memory space.
Since multiple inheritance is not allowed in Java, hence, after a class extends the Thread class,
it can’t extend to any other class.
Every thread creates a unique object and associates with it. 

Runnable:-
It is a functional interface.
It can be used to create a thread.
It has a single abstract method ‘run’.
It requires less memory space.
When a class implements the ‘runnable’ interface, the class can extend to other classes.
Multiple threads can share the same objects.

Q6) What if we call Java run() method directly instead start() method?
-->
If run() method is called directly instead of start() method in Java code, run() method will be treated as a normal overridden method of the thread class (or runnable interface).
This run method will be executed with in the context of the current thread not in a new thread.


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 