Q2/ What is a ThreadPool, how to create a thread pool of 4 threads, and write down the
difference between the Callable and Runnable interface?
-->
Thread pool is a pool of already created threads ready to do our tasks.
Thread pool framework is also known as executor framework. this concept is introduced in java5.
Thread pool related API comes in the form of java.util.concurrent package.
Without Thread pool, if we have 10 different independent tasks are there then we need to create 10 separate
threads.
But using Thread pool concept ,we create a Thread pool of 5 threads and submit all the 10 tasks to this Thread
pool.
Here a single thread can perform multiple independent tasks. so that performance will be improved.


--We can create Thread Pool of 4 thread as follows:

ExecutorService service=Executors.newFixedThreadPool(4);



--difference between callable and runnable interface:-
--Runnable
If a thread won't returns anything.
only one method public void run() 
return type void
if any exception raise compulsory we need to
handle within try catch.
Belongs to java.lang package
from java 1.0 version
--callable
If a Thread returns anything
only one method public Object call() throws Exception
return type is Object
not required to use try-catch
Belongs to java.util.concurrent package
from java 1.5 version

Q3/- What do you mean by a Race condition, How to solve a race condition, give a proper
example.
-->
Java is a multi-threaded programming language and there is a higher risk to occur race conditions. Because the
same resource may be accessed by multiple threads at the same time and may change the data.
A race-condition is a condition in which the critical section (a part of the program where shared memory is accessed)
is concurrently executed by two or more threads. It leads to incorrect behavior of a program.
In layman terms, a race condition can be defined as, a condition in which two or more threads compete together to
get certain shared resources.
For example, if thread A is reading data from the linked list and another thread B is trying to delete the same data.
This process leads to a race condition that may result in run time error
To solve the data inconsistency problem in java synchronized keyword is used.
So the thread-safety is achieved and race condition is avoided by the help of synchronized keyword.
Example:
class Common{
public void fun1(Stirng name){
System.out.print("Welcome");
try{
Thread.sleep(1000);
}
catch(Exception ee){
}
System.out.println(name);
}
the above method fun1() is supposed to give the output as hello and after one second print the supplied name.
Now what will happen if two threads acts on this fun simultaneously.
lass ThreadA extends Thread{
Common c;
String name;
public ThreadA(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}

class ThreadB extends Thread{
Common c;
String name;
public ThreadB(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}


class Main{
public static void main(String[] args){
Common c=new Common();
//sharing same Common object to two thread
ThreadA t1=new ThreadA(c,"Ram");
ThreadB t2=new ThreadB(c,"Shyam");
t1.start();
t2.start();
}
}

Now the output will be hello hello Ram Shyam which is not expected.
We can get the desired output if we avoid two thread acting on fun1() simultaneously.
To achieve this requirement we need to make fun1() as synchronized.
The synchronized keyword applicable only for methods and blocks but not for variables and classes.
If a method or block is declared as synchronized then at a time only one thread is allowed to execute that method or
block on a given object so that data inconsistency problem will be resolved.

Q4/ Explain about thread synchronization(inter-thread communication).
-->
It means two synchronized threads communicate each other.
Two synchronized thread can communicate each other by using some methods present in Object class, those
methods are wait(), notify(), notifyAll().
By using above methods we can gain partial control on the scheduling mechanism which is supervised by the
thread-scheduler.
To gain this partial control the threads should have a sign of mutual understanding between them .they should be
able to communicate with each other.
Whenever we need to suspend a synchronized thread unconditionally then we use wait() method.
Whenever we need to resume a suspended(waiting) thread then we use notify() method
this is known as thread-synchronization or inter-thread communication.
In the inter-thread communication the thread which require updation it has to call wait() method.
The thread which performing updation it will call notify() method, so that waiting thread will gets the notification
and it continues its execution with those updation.
we can call wait(), notify(),notifyAll() only in the synchronized block or synchronized methods.
otherwise we will get a runtime exception.
To call wait() or notify() method on any object we must have that particular object lock otherwise we will get a
runtime exception called IllegalMonitorStateException.
Once a thread calls wait() method on any object, first it releases the lock immediately of that particular object and
then it enters into the waiting state immediately.
Once a thread calls notify() method on any object it also releases the lock of that object but not immediately.
Wait and notify or notifyAll method belongs from Object class because "a thread" can call these methods on any
java object.

Q5/- What is the difference between the sleep and wait method?
-->
There is a static method by name sleep(long ms) inside the Thread class which takes time in milliseconds as an
argument
Example:
 Thread.sleep(1000);
This method will suspend the current thread which is under execution with those many millisecond passed as
argument(1000ms=1sec).
This sleep method is proven to generate checked exception hence it must be called inside try and catch block.
Whenever we need to suspend a synchronized thread unconditionally then we use wait() method.
In the inter-thread communication the thread which require updation it has to call wait() method.































